name: Certificate Extraction

on: 
  workflow_dispatch: 
    inputs: 
      download_link: 
        description: 'Software download link' 
        required: true 
      certificate_name: 
        description: 'Name for the certificate' 
        required: true 

jobs: 
  extract_certificate: 
    runs-on: windows-latest 
    steps: 
      - name: Checkout Repository 
        uses: actions/checkout@v2 

      - name: Download Software  
        id: download  
        shell: pwsh  
        run: |
          # Retrieve user inputs
          $download_link = "${{ github.event.inputs.download_link }}"
          $software_name = "${{ github.event.inputs.certificate_name }}"
          
          # Ensure valid filename
          if (-not $software_name) { 
            $software_name = "downloaded_software" 
          }
      
          Write-Host "üì• Downloading software from: $download_link"
          Invoke-WebRequest -Uri $download_link -OutFile "$software_name.exe"
      
          if (!(Test-Path "$software_name.exe")) {
            Write-Host "‚ùå ERROR: Download failed or file missing!"
            exit 1
          }
      
          Write-Host "‚úÖ Download complete: $software_name.exe"
      
          # Pass variables to next steps
          $line = "SOFTWARE_NAME=$software_name"
          Write-Host "GITHUB_OUTPUT: [$env:GITHUB_OUTPUT]"
          Add-Content -Path ($env:GITHUB_OUTPUT.Trim()) -Value $line


      - name: Determine Certificate Name  
        id: cert_name  
        shell: pwsh
        run: |  
          $software_name = "${{ steps.download.outputs.SOFTWARE_NAME }}"
          $cert_name = "${{ github.event.inputs.certificate_name }}"

          if (-not $cert_name) { 
            $cert_name = $software_name
          }

          Write-Host "üîñ Certificate name set to: $cert_name.cer"  
          
          # Pass variable to next steps
          Add-Content -Path $env:GITHUB_OUTPUT -Value "CERTIFICATE_NAME=$cert_name.cer"

      - name: Extract Signing Certificate  
        shell: pwsh
        run: |  
          $software_name = "${{ steps.download.outputs.SOFTWARE_NAME }}"
          $certificate_name = "${{ steps.cert_name.outputs.CERTIFICATE_NAME }}"
          
          $exePath = "$software_name.exe"
          $certDir = "Certificates"

          if (-Not (Test-Path $certDir -PathType Container)) { 
              New-Item -ItemType Directory -Path $certDir | Out-Null 
          } 

          $certPath = Join-Path -Path $certDir -ChildPath $certificate_name

          try { 
              $cert = (Get-AuthenticodeSignature -FilePath $exePath).SignerCertificate 
              if ($cert) { 
                  $cert.Export("Cert") | Set-Content -Path $certPath -Encoding Byte 
                  Write-Host "‚úÖ Certificate successfully extracted to: $certPath" 
              } else { 
                  Write-Host "‚ùå ERROR: No certificate found in the executable." 
                  exit 1 
              } 
          } catch { 
              Write-Host "‚ùå An error occurred: $_" 
              exit 1 
          } 

      - name: Commit Extracted Certificate  
        shell: pwsh 
        run: |  
          $certificate_name = "${{ steps.cert_name.outputs.CERTIFICATE_NAME }}"

          Write-Host "üì§ Committing extracted certificate to repository..."  
          git config --local user.name "github-actions"  
          git config --local user.email "action@github.com"  
          git add "Certificates/$certificate_name"  
          git commit -m "Added extracted certificate: $certificate_name"  
          git push  

      - name: Update README.md  
        shell: pwsh
        run: |  
          $certificate_name = "${{ steps.cert_name.outputs.CERTIFICATE_NAME }}"
          $date = Get-Date -Format "yyyy-MM-dd"  
          $table_row = "| $date | $certificate_name |"  

          # Read the existing README.md content
          $readmeContent = Get-Content README.md

          # Check if the certificate already has a row
          if ($readmeContent -match "\|.*$certificate_name.*\|") {
              # Update the existing row with the new date
              $readmeContent = $readmeContent -replace "(\|.*$certificate_name.*\|)", "| $date | $certificate_name |"
          } else {
              # If no existing row, add the table with a new row
              $tableHeader = "`n| Date       | Certificate Name      |`"
              $tableSeparator = "`n|------------|-----------------------|`"
              $tableContent = "$tableHeader$tableSeparator$table_row"
              Add-Content -Path README.md -Value $tableContent
          }

          # Write the updated content back to README.md
          Set-Content README.md -Value $readmeContent

          # Add the updated README.md to git and commit
          git config --local user.name "github-actions"  
          git config --local user.email "action@github.com"  
          git add README.md  
          git commit -m "Updated README with last extraction details"  
          git push
