name: Certificate Extraction

on:
  workflow_dispatch:
    inputs:
      download_link:
        description: 'Software download link'
        required: true
      certificate_name:
        description: 'Optional: Name for the certificate (leave blank to use extracted name)'
        required: false

jobs:
  extract_certificate:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache Windows SDK Signing Tools
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Windows Kits\10\bin\
          key: windows-sdk-signing-tools

      - name: Install Windows SDK Standalone Signing Tools (if not cached)
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Downloading Windows SDK Standalone Signing Tools..."
          $sdkUrl = "https://go.microsoft.com/fwlink/?linkid=2302130"
          $sdkInstaller = "$env:USERPROFILE\Downloads\WindowsSDK.exe"
          Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkInstaller
          Start-Process -FilePath $sdkInstaller -ArgumentList "/quiet", "/norestart" -Wait

      - name: Download Software
        shell: powershell
        run: |
          $download_link = "${{ github.event.inputs.download_link }}"
          $software_name = "${{ github.event.inputs.certificate_name }}"
          if (-not $software_name) { $software_name = "downloaded_software" }
          Write-Host "üì• Downloading software from: $download_link"
          Invoke-WebRequest -Uri $download_link -OutFile "$software_name.exe"
          if (!(Test-Path "$software_name.exe")) {
            Write-Host "‚ùå ERROR: Download failed or file missing!"
            exit 1
          }
          echo "SOFTWARE_NAME=$software_name" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV

      - name: Verify Digital Signature
        shell: powershell
        run: |
          Write-Host "üîç Checking digital signature..."
          $softwarePath = "${{ env.SOFTWARE_NAME }}.exe"
          $signature = Get-AuthenticodeSignature -FilePath $softwarePath
          if ($signature.Status -eq "Valid") {
            Write-Host "‚úÖ File is digitally signed."
          } elseif ($signature.Status -eq "NotSigned") {
            Write-Host "‚ùå No digital signature found!"
            exit 1
          } else {
            Write-Host "‚ö†Ô∏è Unknown signature status: $($signature.Status)"
            exit 1
          }

      - name: Extract Signing Certificate
        shell: powershell
        run: |
          mkdir -Force Certificates
          $cert_output = "Certificates/${{ github.event.inputs.certificate_name }}.cer"
          $softwarePath = "${{ env.SOFTWARE_NAME }}.exe"
          Write-Host "üìÇ Extracting certificate from signed executable..."
          $signature = Get-AuthenticodeSignature -FilePath $softwarePath
          if ($null -eq $signature.SignerCertificate) {
            Write-Host "‚ùå ERROR: No certificate found in the file!"
            exit 1
          }
          $signature.SignerCertificate | Export-Certificate -Type CERT -FilePath $cert_output
          if (-not (Test-Path $cert_output)) {
            Write-Host "‚ùå ERROR: Certificate extraction failed!"
            exit 1
          }
          Write-Host "‚úÖ Certificate extracted successfully: $cert_output"

      - name: Commit Extracted Certificate
        shell: powershell
        run: |
          Write-Host "üì§ Committing extracted certificate to repository..."
          git config --local user.name "github-actions"
          git config --local user.email "action@github.com"
          git add "Certificates/${{ github.event.inputs.certificate_name }}.cer"
          git commit -m "Added extracted certificate: ${{ github.event.inputs.certificate_name }}.cer"
          git push

      - name: Update README.md
        shell: powershell
        run: |
          Write-Host "üìù Updating README.md with extraction date..."
          $date = Get-Date -Format "yyyy-MM-dd"
          (Get-Content README.md) -replace 'Last certificate extracted on: .*', "Last certificate extracted on: $date" | Set-Content README.md
          git config --local user.name "github-actions"
          git config --local user.email "action@github.com"
          git add README.md
          git commit -m "Updated README with last extraction date"
          git push
