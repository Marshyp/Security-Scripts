name: Certificate Extraction

on: 
  workflow_dispatch: 
    inputs: 
      download_link: 
        description: 'Software download link' 
        required: true 
      certificate_name: 
        description: 'Name for the certificate' 
        required: true 

jobs: 
  extract_certificate: 
    runs-on: windows-latest 
    steps: 
      - name: Checkout Repository 
        uses: actions/checkout@v2 

      - name: Download Software  
        id: download  
        shell: pwsh  
        run: |
          # Retrieve user inputs
          $download_link = "${{ github.event.inputs.download_link }}"
          $software_name = "${{ github.event.inputs.certificate_name }}"
          
          # Ensure valid filename
          if (-not $software_name) { 
            $software_name = "downloaded_software" 
          }
      
          Write-Host "üì• Downloading software from: $download_link"
          Invoke-WebRequest -Uri $download_link -OutFile "$software_name.exe"
      
          if (!(Test-Path "$software_name.exe")) {
            Write-Host "‚ùå ERROR: Download failed or file missing!"
            exit 1
          }
      
          Write-Host "‚úÖ Download complete: $software_name.exe"
      
          # Pass variables to next steps
          $line = "SOFTWARE_NAME=$software_name"
          Write-Host "GITHUB_OUTPUT: [$env:GITHUB_OUTPUT]"
          Add-Content -Path ($env:GITHUB_OUTPUT.Trim()) -Value $line


      - name: Determine Certificate Name  
        id: cert_name  
        shell: pwsh
        run: |  
          $software_name = "${{ steps.download.outputs.SOFTWARE_NAME }}"
          $cert_name = "${{ github.event.inputs.certificate_name }}"

          if (-not $cert_name) { 
            $cert_name = $software_name
          }

          Write-Host "üîñ Certificate name set to: $cert_name.cer"  
          
          # Pass variable to next steps
          Add-Content -Path $env:GITHUB_OUTPUT -Value "CERTIFICATE_NAME=$cert_name.cer"

      - name: Extract Signing Certificate  
        shell: pwsh
        run: |  
          $software_name = "${{ steps.download.outputs.SOFTWARE_NAME }}"
          $certificate_name = "${{ steps.cert_name.outputs.CERTIFICATE_NAME }}"
          
          $exePath = "$software_name.exe"
          $certDir = "Certificates"

          if (-Not (Test-Path $certDir -PathType Container)) { 
              New-Item -ItemType Directory -Path $certDir | Out-Null 
          } 

          $certPath = Join-Path -Path $certDir -ChildPath $certificate_name

          try {
                Unblock-File -Path $exePath
                $signature = Get-AuthenticodeSignature -FilePath $exePath
                Write-Host "Signature Status: $($signature.Status)"
                Write-Host "Signature Details:"
                $signature | Format-List *
                
                if ($signature.SignerCertificate) {
                    $cert = $signature.SignerCertificate
                } elseif ($signature.TimeStampSignerCertificate) {
                    $cert = $signature.TimeStampSignerCertificate
                }
                
                if ($cert) {
                    [System.IO.File]::WriteAllBytes($certPath, $cert.Export("Cert"))
                    Write-Host "‚úÖ Certificate successfully extracted to: $certPath"
                } else {
                    Write-Host "‚ùå ERROR: No certificate found in the executable."
                    exit 1
                }

              # Remove the downloaded executable to prevent untracked files
              Remove-Item -Path $exePath -Force


            } catch {
                Write-Host "‚ùå An error occurred: $_"
                exit 1
            }


      - name: Commit Extracted Certificate  
        shell: pwsh 
        run: |  
          $certificate_name = "${{ steps.cert_name.outputs.CERTIFICATE_NAME }}"

          Write-Host "üì§ Committing extracted certificate to repository..."  
          git config --local user.name "github-actions"  
          git config --local user.email "action@github.com"  
          git add "Certificates/$certificate_name"  
          git commit -m "Added extracted certificate: $certificate_name"  
          git push  

      - name: Update README.md  
        shell: pwsh
        run: |
          $certificate_name = "${{ steps.cert_name.outputs.CERTIFICATE_NAME }}"
          $date = Get-Date -Format "yyyy-MM-dd"
          $download_link = "${{ github.event.inputs.download_link }}"
          $table_row = "| $date | $certificate_name | [$download_link]($download_link) |"
          $readmePath = "Certificates/README.md"
      
          # If README.md does not exist in Certificates folder, create it with header, badge, description, and table header
          if (-not (Test-Path $readmePath)) {
            Write-Host "README.md not found in Certificates folder. Creating new file..."
            $header = "# Certificates for Defender blocking`n"
            $horizontal = "---`n"
            $badge = "![Certificates](https://img.shields.io/badge/Certificates-0-blue)`n"
            $description = "This repository is provided by Philip Marsh to allow users to download certificates and provision their own certificates to the repository using the issue template for use in Microsoft Defender for Endpoint to allow or block certificates as appropriate.`n"
            $tableHeader = "| Date       | Title of certificate | Download link of software |`n"
            $tableSeparator = "|------------|----------------------|---------------------------|`n"
            $initialContent = $header + $horizontal + $badge + $description + $horizontal + $tableHeader + $tableSeparator
            Set-Content -Path $readmePath -Value $initialContent
          }
      
          # Read the existing README.md content (as one string)
          $readmeContent = Get-Content $readmePath -Raw
      
          # Update the certificate count badge
          # Count the number of table rows (skip header and separator)
          $tableLines = $readmeContent -split "`n" | Where-Object { $_ -match "^\|" }
          $certificateCount = [Math]::Max(0, $tableLines.Count - 2)
          # Assume the badge is on the third line
          $lines = $readmeContent -split "`n"
          if ($lines.Count -ge 3) {
            $lines[2] = "![Certificates](https://img.shields.io/badge/Certificates-$certificateCount-blue)"
          }
          $readmeContent = $lines -join "`n"
      
          # Check if a row for this certificate already exists
          if ($readmeContent -match "\|.*$certificate_name.*\|") {
            # Update the existing row with the new date and download link
            $readmeContent = $readmeContent -replace "(\|.*$certificate_name.*\|)", $table_row
          } else {
            # Append the new row to the end of the table
            $readmeContent += "`n" + $table_row
          }
      
          # Write the updated content back to the README.md file in the Certificates folder
          Set-Content -Path $readmePath -Value $readmeContent
      
          # Stage and commit the changes
          git config --local user.name "github-actions"
          git config --local user.email "action@github.com"
          git add $readmePath
          git commit -m "Updated Certificates README with last extraction details" || Write-Host "Nothing to commit for README"
          git push
      