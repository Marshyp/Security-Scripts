name: Certificate Extraction

on:
  workflow_dispatch:
    inputs:
      download_link:
        description: 'Software download link'
        required: true
      certificate_name:
        description: 'Optional: Name for the certificate (leave blank to use extracted name)'
        required: false

jobs:
  extract_certificate:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download Software 
        id: download 
        shell: powershell 
        run: | 
          $download_link = "${{ github.event.inputs.download_link }}"
          $software_name = "${{ github.event.inputs.certificate_name }}"
          
          if (-not $software_name) { $software_name = "downloaded_software" }
          
          Write-Host "üì• Downloading software from: $download_link"
          Invoke-WebRequest -Uri "$download_link" -OutFile "$software_name.exe"
          
          if (!(Test-Path "$software_name.exe")) { 
            Write-Host "‚ùå ERROR: Download failed or file missing!" 
            exit 1 
          }
          
          Write-Host "‚úÖ Download complete: $software_name.exe"
          
          echo "SOFTWARE_NAME=$software_name" | Out-File -FilePath "$env:GITHUB_ENV" -Append -Encoding utf8

      - name: Determine Certificate Name 
        id: cert_name 
        shell: powershell 
        run: | 
          $cert_name = "${{ github.event.inputs.certificate_name }}" 
          if (-not $cert_name) { $cert_name = "${{ env.SOFTWARE_NAME }}" } 
          
          Write-Host "üîñ Certificate name set to: $cert_name.cer" 
          echo "CERTIFICATE_NAME=$cert_name.cer" | Out-File -FilePath "$env:GITHUB_ENV" -Append -Encoding utf8

      - name: Extract Signing Certificate 
        shell: powershell 
        run: | 
          $exePath = "${{ env.SOFTWARE_NAME }}.exe"
          $certDir = "Certificates"
          if (-Not (Test-Path $certDir -PathType Container)) {
              New-Item -ItemType Directory -Path $certDir | Out-Null
          }
          $certPath = Join-Path -Path $certDir -ChildPath "${{ env.CERTIFICATE_NAME }}"

          try {
              $cert = (Get-AuthenticodeSignature -FilePath $exePath).SignerCertificate
              if ($cert) {
                  $cert.Export("Cert") | Set-Content -Path $certPath -Encoding Byte
                  Write-Host "‚úÖ Certificate successfully extracted to: $certPath"
              } else {
                  Write-Host "‚ùå ERROR: No certificate found in the executable."
                  exit 1
              }
          } catch {
              Write-Host "‚ùå An error occurred: $_"
              exit 1
          }

      - name: Commit Extracted Certificate 
        shell: powershell 
        run: | 
          Write-Host "üì§ Committing extracted certificate to repository..." 
          git config --local user.name "github-actions" 
          git config --local user.email "action@github.com" 
          git add "Certificates/${{ env.CERTIFICATE_NAME }}" 
          git commit -m "Added extracted certificate: ${{ env.CERTIFICATE_NAME }}" 
          git push 

      - name: Update README.md 
        shell: powershell 
        run: | 
          Write-Host "üìù Updating README.md with extraction date..." 
          $date = Get-Date -Format "yyyy-MM-dd" 
          (Get-Content README.md) -replace 'Last certificate extracted on: .*', "Last certificate extracted on: $date" | Set-Content README.md 
          git config --local user.name "github-actions" 
          git config --local user.email "action@github.com" 
          git add README.md 
          git commit -m "Updated README with last extraction date" 
          git push
