name: Certificate Extraction

on:
  workflow_dispatch:
    inputs:
      download_link:
        description: 'Software download link'
        required: true
      certificate_name:
        description: 'Name for the certificate - Please use the software name and version'
        required: true

jobs:
  extract_certificate:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Windows SDK for signtool
        shell: powershell
        run: |
          Write-Host "Downloading Windows SDK..."
          $sdkInstaller = "$env:Temp\winsdksetup.exe"
          Invoke-WebRequest -Uri "https://aka.ms/AAe3y1g" -OutFile $sdkInstaller
          
          Write-Host "Installing Windows SDK..."
          Start-Process -FilePath $sdkInstaller -ArgumentList "/quiet", "/norestart", "OptionId.SigningTools=1" -Wait
          
          Write-Host "Locating signtool.exe..."
          $signtoolPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter "signtool.exe" | Select-Object -First 1 -ExpandProperty FullName

          if (-not $signtoolPath) {
            Write-Error "signtool.exe not found!"
            exit 1
          }
          
          echo "SIGNS_TOOL_PATH=$signtoolPath" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV
          Write-Host "signtool.exe found at: $signtoolPath"

      - name: Download Software
        shell: powershell
        run: |
          $download_link = "${{ github.event.inputs.download_link }}"
          $software_name = "${{ github.event.inputs.certificate_name }}"
          if (-not $software_name) {
            $software_name = "downloaded_software"
          }
          Invoke-WebRequest -Uri $download_link -OutFile "$software_name.exe"
          echo "SOFTWARE_NAME=$software_name" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV

      - name: Determine Certificate Name
        shell: powershell
        run: |
          $cert_name = "${{ github.event.inputs.certificate_name }}"
          if (-not $cert_name) {
            $cert_name = "${{ env.SOFTWARE_NAME }}"
          }
          echo "CERTIFICATE_NAME=$cert_name.cer" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV

      - name: Extract Signing Certificate
        shell: powershell
        run: |
          mkdir -Force Certificates
          $cert_output = "Certificates/${{ env.CERTIFICATE_NAME }}"
          & "${{ env.SIGNS_TOOL_PATH }}" verify /pa "${{ env.SOFTWARE_NAME }}.exe" > "$cert_output"

      - name: Update README.md
        shell: powershell
        run: |
          $date = Get-Date -Format "yyyy-MM-dd"
          (Get-Content README.md) -replace 'Last certificate extracted on: .*', "Last certificate extracted on: $date" | Set-Content README.md
          git config --local user.name "github-actions"
          git config --local user.email "action@github.com"
          git add README.md
          git commit -m "Updated README with last extraction date"
          git push
