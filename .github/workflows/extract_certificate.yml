name: Certificate Extraction

on:
  workflow_dispatch:
    inputs:
      download_link:
        description: 'Software download link'
        required: true
      certificate_name:
        description: 'Optional: Name for the certificate (leave blank to use extracted name)'
        required: false

jobs:
  extract_certificate:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache Windows SDK Signing Tools
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: C:\Program Files (x86)\Windows Kits\10\bin\
          key: windows-sdk-signing-tools

      - name: Install Windows SDK Standalone Signing Tools (if not cached)
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Downloading Windows SDK Standalone Signing Tools..." 
          $sdkUrl = "https://go.microsoft.com/fwlink/?linkid=2302130" 
          $sdkInstaller = "$env:USERPROFILE\Downloads\WindowsSDK.exe" 
 
          Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkInstaller 
          Start-Process -FilePath $sdkInstaller -ArgumentList "/quiet", "/norestart" -Wait 
 
      - name: Locate SignTool 
        shell: powershell 
        run: | 
          Write-Host "üîç Locating signtool.exe..." 
          $signtoolPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter "signtool.exe" |  
            Where-Object { $_.FullName -match "x64|x86" -and $_.FullName -notmatch "arm" } |  
            Select-Object -ExpandProperty FullName -First 1 
 
          if (-not $signtoolPath) { 
            Write-Host "‚ùå ERROR: signtool.exe not found after installation." 
            exit 1 
          } 
 
          Write-Host "‚úÖ Using signtool.exe at: $signtoolPath" 
          echo "SIGNS_TOOL_PATH=$signtoolPath" | Out-File -FilePath "$env:GITHUB_ENV" -Append -Encoding utf8

      - name: Download Software 
        id: download 
        shell: powershell 
        run: | 
          $download_link = "${{ github.event.inputs.download_link }}"
          $software_name = "${{ github.event.inputs.certificate_name }}"
          
          if (-not $software_name) { $software_name = "downloaded_software" }
          
          Write-Host "üì• Downloading software from: $download_link"
          Invoke-WebRequest -Uri "$download_link" -OutFile "$software_name.exe"
          
          if (!(Test-Path "$software_name.exe")) { 
            Write-Host "‚ùå ERROR: Download failed or file missing!" 
            exit 1 
          }
          
          Write-Host "‚úÖ Download complete: $software_name.exe"
          
          echo "SOFTWARE_NAME=$software_name" | Out-File -FilePath "$env:GITHUB_ENV" -Append -Encoding utf8

      - name: Determine Certificate Name 
        id: cert_name 
        shell: powershell 
        run: | 
          $cert_name = "${{ github.event.inputs.certificate_name }}" 
          if (-not $cert_name) { $cert_name = "${{ env.SOFTWARE_NAME }}" } 
          
          Write-Host "üîñ Certificate name set to: $cert_name.cer" 
          echo "CERTIFICATE_NAME=$cert_name.cer" | Out-File -FilePath "$env:GITHUB_ENV" -Append -Encoding utf8

      - name: Verify Digital Signature 
        shell: powershell 
        run: | 
          Write-Host "üîç Checking digital signature..." 
          $softwarePath = "${{ env.SOFTWARE_NAME }}.exe" 
          $signature = Get-AuthenticodeSignature -FilePath $softwarePath 
 
          Write-Host "üìù Signature Status: $($signature.Status)" 
          Write-Host "üñãÔ∏è  Issuer: $($signature.SignerCertificate.Issuer)" 
          Write-Host "üìÖ Valid From: $($signature.SignerCertificate.NotBefore)" 
          Write-Host "üìÖ Valid Until: $($signature.SignerCertificate.NotAfter)" 
 
          if ($signature.Status -eq "Valid") { 
            Write-Host "‚úÖ File is digitally signed." 
          } elseif ($signature.Status -eq "NotSigned") { 
            Write-Host "‚ùå No digital signature found!" 
            exit 1 
          } else { 
            Write-Host "‚ö†Ô∏è Unknown signature status: $($signature.Status)" 
            exit 1 
          } 

      - name: Extract Signing Certificate 
        shell: powershell 
        run: | 
          mkdir -Force Certificates 
          $cert_output = "Certificates/${{ env.CERTIFICATE_NAME }}" 
 
          Write-Host "üìÇ Extracting certificate from signed executable..." 
          $cert = (Get-AuthenticodeSignature -FilePath "${{ env.SOFTWARE_NAME }}.exe").SignerCertificate
          Export-Certificate -Cert $cert -FilePath $cert_output -Type CERT
 
          if (-not (Test-Path $cert_output)) { 
            Write-Host "‚ùå ERROR: Certificate extraction failed!" 
            exit 1 
          } 
 
          Write-Host "‚úÖ Certificate extracted: $cert_output" 

      - name: Commit Extracted Certificate 
        shell: powershell 
        run: | 
          Write-Host "üì§ Committing extracted certificate to repository..." 
          git config --local user.name "github-actions" 
          git config --local user.email "action@github.com" 
          git add "Certificates/${{ env.CERTIFICATE_NAME }}" 
          git commit -m "Added extracted certificate: ${{ env.CERTIFICATE_NAME }}" 
          git push 

      - name: Update README.md 
        shell: powershell 
        run: | 
          Write-Host "üìù Updating README.md with extraction date..." 
          $date = Get-Date -Format "yyyy-MM-dd" 
          (Get-Content README.md) -replace 'Last certificate extracted on: .*', "Last certificate extracted on: $date" | Set-Content README.md 
          git config --local user.name "github-actions" 
          git config --local user.email "action@github.com" 
          git add README.md 
          git commit -m "Updated README with last extraction date" 
          git push
